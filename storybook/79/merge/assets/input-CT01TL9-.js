import{j as x,e as h}from"./create-recipe-context-LbQq3bM7.js";import{r as i}from"./index-BXymfbzT.js";import{ag as m}from"./index-BQKA0mAR.js";function y(t,r){return`${t} returned \`undefined\`. Seems you forgot to wrap component within ${r}`}function C(t={}){const{name:r,strict:n=!0,hookName:e="useContext",providerName:o="Provider",errorMessage:c,defaultValue:p}=t,s=i.createContext(p);s.displayName=r;function a(){var d;const l=i.useContext(s);if(!l&&n){const u=new Error(c??y(e,o));throw u.name="ContextError",(d=Error.captureStackTrace)==null||d.call(Error,u,a),u}return l}return[s.Provider,a,s]}function w(...t){return r=>{const n=[];for(const e of t)if(typeof e=="function"){const o=e(r);typeof o=="function"&&n.push(o)}else e&&(e.current=r);if(n.length)return()=>{for(const e of n)e()}}}function P(t){var e,o;let r=(e=Object.getOwnPropertyDescriptor(t.props,"ref"))==null?void 0:e.get,n=r&&"isReactWarning"in r&&r.isReactWarning;return n?t.ref:(r=(o=Object.getOwnPropertyDescriptor(t,"ref"))==null?void 0:o.get,n=r&&"isReactWarning"in r&&r.isReactWarning,n?t.props.ref:t.props.ref||t.ref)}const f=t=>{const r=i.memo(i.forwardRef((n,e)=>{const{asChild:o,children:c,...p}=n;if(!o)return i.createElement(t,{...p,ref:e},c);const s=i.Children.only(c);if(!i.isValidElement(s))return null;const a=P(s);return i.cloneElement(s,{...m(p,s.props),ref:e?w(e,a):a})}));return r.displayName=t.displayName||t.name,r},R=()=>{const t=new Map;return new Proxy(f,{apply(r,n,e){return f(e[0])},get(r,n){const e=n;return t.has(e)||t.set(e,f(e)),t.get(e)}})},E=R(),[I,F]=C({name:"FieldContext",hookName:"useFieldContext",providerName:"<FieldProvider />",strict:!1}),g=i.forwardRef((t,r)=>{const n=F(),e=m(n==null?void 0:n.getInputProps(),t);return x.jsx(E.input,{...e,ref:r})});g.displayName="FieldInput";const{withContext:N}=h({key:"input"}),W=N(g);export{I as F,W as I,E as a,w as b,C as c,F as u};
